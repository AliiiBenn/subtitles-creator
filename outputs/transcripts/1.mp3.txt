Hi everyone, welcome to my tutorial. Now in this video, we are going to see what is MVC. Now MVC stands for Model View Controller. It is an architectural pattern. Now what is an architectural pattern? An architectural pattern governs the whole architecture of our application. Now it is a kind of design pattern only, but it has a much broader scope. For example, normal design patterns are used for solving specific technical problems in our application, whereas an architectural pattern is used for solving larger architectural problems. So it basically affects the entire architecture of our application. Then MVC divides a software application in three parts, model, view and controller. So this is what we call as separation of concerns. So each of these three components will have some specific responsibility. Now let's see how an MVC pattern is implemented in a web application. So let's say we have a client, a server and a database. So these are the three main components of any web application. Now let's say our client wants to see a list of all products which are stored in this database. So our database over here basically stores information about different products. So it can be TV, mobile phones, etc. And our client over here wants to see a list of all products which are stored in this database. Now for getting a list of all products, our client will send a request to the server. Now let us assume that there are multiple people working inside the server and each of them has some specific task. Now when the request comes to the server, there's a guy standing over here at the front and I'll just give it a nickname. Let's say we call it blue just because it's blue in color. So blue will take the request from the client and now blue will have to go to the database and get the list of all products and then send that list to the client. But blue doesn't do it directly. And that is because we have another guy over here called red who specializes in talking to the database or interacting with the database. So blue will now pass the request information to red and now red will interact with the database and get the list of all products from the database and send it to blue. Now blue has all the data. So ideally blue should send that data to the client, but the data which it has is raw data. So this data might not be in human readable format. Okay. So the client may not like it when he or she sees it on the screen. Okay. Because it might be just plain text data. So we have another guy over here called green who specializes in presenting data to the client. Now blue gives the raw data to green and now green will format the data so that it looks attractive to the user. So maybe green will take the raw data and arrange it in a tabular format or maybe apply some styling to it so that it appears good. Right. And now this formatted data will be sent to the client. So this is how an MVC architecture works. Now this blue, red, green are just nicknames which I've given to these components. So red over here is our model. Green is our view and blue is our controller. So we have our model view controller pattern. Now let's look at the overall flow of control one more time. So our client will first send a request to the server. Then the controller will take that request and pass it to model. Then model will interact with the database and in the process it may also execute some business logic if required. Then after getting the data from the database it will pass it to the controller. Then the controller will pass that data to our view. Then the view will format that data and that formatted data will be sent to the client. So this is how our architecture works. Now each of these three components has some specific responsibility. Right. So our model it interacts with the database and it is also responsible for executing business logic. So our model basically deals with data. Then our view is what user sees on the screen. It generates the UI or user interface for the user and our controller takes user input also called as request parameters. It also interacts with the model and view. So our controller basically acts as a middleman between our model and view. Now if we consider a Java web application then a model will be typically a Java class. A view would be a JSP page or any other presentation technology. A controller would be a servlet or a servlet filter. So this is our MVC architecture. Now how these three components interact with each other that might be different for different MVC frameworks. So how these components pass data between each other that might be different for different MVC frameworks. But the overall picture will remain the same and that is the application will be divided into three parts. So there will be a model, a view and a controller. So that's it guys. Thank you for watching and see you in my next tutorial.